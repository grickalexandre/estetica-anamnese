rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Função auxiliar para verificar autenticação
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Função para verificar se o usuário pertence à clínica
    function belongsToClinica(clinicaId) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.clinicaId == clinicaId;
    }
    
    // Regras para usuários
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Regras para clínicas
    match /clinicas/{clinicaId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(clinicaId);
    }
    
    // Regras para configurações
    match /configuracoes/{clinicaId} {
      allow read: if true; // Permite leitura pública para página de anamnese do cliente
      allow write: if belongsToClinica(clinicaId);
    }
    
    // Regras para anamneses
    match /anamneses/{anamneseId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if true; // Permite criação pública (clientes preenchendo)
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para clientes/pacientes
    match /clientes/{clienteId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated() || true; // Permite criação ao preencher anamnese
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para profissionais
    match /profissionais/{profissionalId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para fornecedores
    match /fornecedores/{fornecedorId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para produtos
    match /produtos/{produtoId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para procedimentos (catálogo)
    match /procedimentos/{procedimentoId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para atendimentos
    match /atendimentos/{atendimentoId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para contas a pagar
    match /contas_pagar/{contaId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para contas a receber
    match /contas_receber/{contaId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para comissões
    match /comissoes/{comissaoId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para plano de contas
    match /plano_contas/{contaId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para movimentações de estoque
    match /movimentacoes_estoque/{movimentacaoId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para compras
    match /compras/{compraId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para despesas recorrentes
    match /despesas_recorrentes/{despesaId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regras para observações de anamnese
    match /observacoes_anamnese/{observacaoId} {
      allow read: if belongsToClinica(resource.data.clinicaId);
      allow create: if isAuthenticated();
      allow update: if belongsToClinica(resource.data.clinicaId);
      allow delete: if belongsToClinica(resource.data.clinicaId);
    }
    
    // Regra padrão: negar tudo que não foi especificado
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

